"use strict";(self.webpackChunkreact_native_website=self.webpackChunkreact_native_website||[]).push([[60946],{35318:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>h});var n=r(27378);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=l(r),h=o,m=u["".concat(p,".").concat(h)]||u[h]||d[h]||a;return r?n.createElement(m,i(i({ref:t},s),{},{components:r})):n.createElement(m,i({ref:t},s))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=u;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},38286:(e,t,r)=>{r.d(t,{ZP:()=>h});var n=r(35318),o=Object.defineProperty,a=Object.defineProperties,i=Object.getOwnPropertyDescriptors,c=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable,s=(e,t,r)=>t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,d=(e,t)=>{for(var r in t||(t={}))p.call(t,r)&&s(e,r,t[r]);if(c)for(var r of c(t))l.call(t,r)&&s(e,r,t[r]);return e};const u={toc:[]};function h(e){var t,r=e,{components:o}=r,s=((e,t)=>{var r={};for(var n in e)p.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&c)for(var n of c(e))t.indexOf(n)<0&&l.call(e,n)&&(r[n]=e[n]);return r})(r,["components"]);return(0,n.kt)("wrapper",(t=d(d({},u),s),a(t,i({components:o,mdxType:"MDXLayout"}))),(0,n.kt)("admonition",d({},{type:"caution"}),(0,n.kt)("p",{parentName:"admonition"},"This documentation is still ",(0,n.kt)("strong",{parentName:"p"},"experimental")," and details are subject to changes as we iterate. Feel free to share your feedback on the ",(0,n.kt)("a",d({parentName:"p"},{href:"https://github.com/reactwg/react-native-new-architecture/discussions/8"}),"discussion inside the working group")," for this page."),(0,n.kt)("p",{parentName:"admonition"},"Moreover, it contains several ",(0,n.kt)("strong",{parentName:"p"},"manual steps"),". Please note that this won't be representative of the final developer experience once the New Architecture is stable. We're working on tools, templates and libraries to help you get started fast on the New Architecture, without having to go through the whole setup.")))}h.isMDXComponent=!0},41370:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>y,contentTitle:()=>m,default:()=>g,frontMatter:()=>h,metadata:()=>f,toc:()=>b});var n=r(35318),o=r(38286),a=Object.defineProperty,i=Object.defineProperties,c=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,d=(e,t,r)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,u=(e,t)=>{for(var r in t||(t={}))l.call(t,r)&&d(e,r,t[r]);if(p)for(var r of p(t))s.call(t,r)&&d(e,r,t[r]);return e};const h={id:"new-architecture-library-ios",title:"\u5728 iOS \u5e93\u4e2d\u542f\u7528"},m=void 0,f={unversionedId:"new-architecture-library-ios",id:"new-architecture-library-ios",title:"\u5728 iOS \u5e93\u4e2d\u542f\u7528",description:"You have defined the JavaScript specs for your native modules as part of the prerequisites and you are now ready to migrate your library to the New Architecture. Here are the steps you can follow to accomplish this.",source:"@site/../cndocs/new-architecture-library-ios.md",sourceDirName:".",slug:"/new-architecture-library-ios",permalink:"/docs/next/new-architecture-library-ios",draft:!1,editUrl:"https://github.com/reactnativecn/react-native-website/blob/production/cnwebsite/../cndocs/new-architecture-library-ios.md",tags:[],version:"current",frontMatter:{id:"new-architecture-library-ios",title:"\u5728 iOS \u5e93\u4e2d\u542f\u7528"},sidebar:"docs",previous:{title:"\u5728 Android \u5e93\u4e2d\u542f\u7528",permalink:"/docs/next/new-architecture-library-android"},next:{title:"\u5728\u5e94\u7528\u4e2d\u542f\u7528\u7684\u9884\u5907\u5de5\u4f5c",permalink:"/docs/next/new-architecture-app-intro"}},y={},b=[{value:"1. Updating your Podspec for the New Architecture",id:"1-updating-your-podspec-for-the-new-architecture",level:2},{value:"Add Folly and Other Dependencies",id:"add-folly-and-other-dependencies",level:3},{value:"2. Extend or implement the code-generated native interfaces",id:"2-extend-or-implement-the-code-generated-native-interfaces",level:2},{value:"Conform to the protocols provided by the native interface code",id:"conform-to-the-protocols-provided-by-the-native-interface-code",level:3}],v={toc:b};function g(e){var t,r=e,{components:a}=r,d=((e,t)=>{var r={};for(var n in e)l.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&p)for(var n of p(e))t.indexOf(n)<0&&s.call(e,n)&&(r[n]=e[n]);return r})(r,["components"]);return(0,n.kt)("wrapper",(t=u(u({},v),d),i(t,c({components:a,mdxType:"MDXLayout"}))),(0,n.kt)(o.ZP,{mdxType:"NewArchitectureWarning"}),(0,n.kt)("p",null,"You have defined the JavaScript specs for your native modules as part of the ",(0,n.kt)("a",u({parentName:"p"},{href:"new-architecture-library-intro"}),"prerequisites")," and you are now ready to migrate your library to the New Architecture. Here are the steps you can follow to accomplish this."),(0,n.kt)("h2",u({},{id:"1-updating-your-podspec-for-the-new-architecture"}),"1. Updating your Podspec for the New Architecture"),(0,n.kt)("p",null,"The New Architecture makes use of CocoaPods."),(0,n.kt)("h3",u({},{id:"add-folly-and-other-dependencies"}),"Add Folly and Other Dependencies"),(0,n.kt)("p",null,"We'll need to ensure Folly is configured properly in any projects that consume your library. With CocoaPods, we can use the ",(0,n.kt)("inlineCode",{parentName:"p"},"compiler_flags")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"dependency")," properties to set it up."),(0,n.kt)("p",null,"Add these to your ",(0,n.kt)("inlineCode",{parentName:"p"},"Pod::Spec.new")," block:"),(0,n.kt)("pre",null,(0,n.kt)("code",u({parentName:"pre"},{className:"language-ruby"}),'folly_compiler_flags = \'-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1 -Wno-comma -Wno-shorten-64-to-32\'\n\nPod::Spec.new do |s|\n  # ...\n  s.compiler_flags  = folly_compiler_flags\n\n  s.pod_target_xcconfig    = {\n    "HEADER_SEARCH_PATHS" => "\\"$(PODS_ROOT)/boost\\""\n  }\n\n  s.dependency "React-Core"\n  s.dependency "React-RCTFabric" # This is for Fabric Component\n  s.dependency "React-Codegen"\n  s.dependency "RCT-Folly"\n  s.dependency "RCTRequired"\n  s.dependency "RCTTypeSafety"\n  s.dependency "ReactCommon/turbomodule/core"\n  # ...\nend\n')),(0,n.kt)("h2",u({},{id:"2-extend-or-implement-the-code-generated-native-interfaces"}),"2. Extend or implement the code-generated native interfaces"),(0,n.kt)("p",null,"The JavaScript spec for your native module or component will be used to generate native interface code for each supported platform (i.e. Android and iOS). These native interface files will be generated when a React Native application that depends on your library is built."),(0,n.kt)("p",null,"While this generated native interface code ",(0,n.kt)("strong",{parentName:"p"},"will not ship as part of your library"),", you do need to make sure your Objective-C or Java code conforms to the protocols provided by these native interface files. You can use the Codegen script to generate your library\u2019s native interface code in order to use ",(0,n.kt)("strong",{parentName:"p"},"as reference"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",u({parentName:"pre"},{className:"language-sh"}),"cd <path/to/your/app>\nnode node_modules/react_native/scripts/generate-artifacts.js \\\n    --path <your app>/ \\\n    --outputPath <an/output/path> \\\n")),(0,n.kt)("p",null,"This command will generate the boilerplate code required by iOS in the output path provided as paramenter."),(0,n.kt)("p",null,"The files that are output by the script ",(0,n.kt)("strong",{parentName:"p"},"should not be committed"),", but you\u2019ll need to refer to them to determine what changes you need to make to your native modules in order for them to provide an implementation for each generated ",(0,n.kt)("inlineCode",{parentName:"p"},"@protocol")," / native interface."),(0,n.kt)("h3",u({},{id:"conform-to-the-protocols-provided-by-the-native-interface-code"}),"Conform to the protocols provided by the native interface code"),(0,n.kt)("p",null,"Update your native module or component to ensure it implements/extends the native interface that has been generated from your JavaScript specs."),(0,n.kt)("p",null,"Following the example set forth in the previous section, your library might import ",(0,n.kt)("inlineCode",{parentName:"p"},"MyAwesomeSpecs.h"),", extend the relevant native interface, and implement the necessary methods for this interface:"),(0,n.kt)("pre",null,(0,n.kt)("code",u({parentName:"pre"},{className:"language-objc"}),"#import <MyAwesomeSpecs/MyAwesomeSpecs.h>\n\n@interface MyAwesomeModule () <StringGetterSpec>\n@end\n\nRCT_EXPORT_METHOD(getString:(NSString *)string\n                   callback:(RCTResponseSenderBlock)callback)\n{\n  // Implement this method\n}\n\n- (std::shared_ptr<TurboModule>)getTurboModule:(const ObjCTurboModule::InitParams &)params\n{\n  return std::make_shared<StringGetterSpecJSI>(params);\n}\n")),(0,n.kt)("p",null,"For an existing native module, you will likely already have one or more instances of ",(0,n.kt)("a",u({parentName:"p"},{href:"native-modules-ios#export-a-native-method-to-javascript"}),(0,n.kt)("inlineCode",{parentName:"a"},"RCT_EXPORT_METHOD")),". To migrate to the New Architecture, you\u2019ll need to make sure the method signature makes use of the structs provided by the codegen output."))}g.isMDXComponent=!0}}]);